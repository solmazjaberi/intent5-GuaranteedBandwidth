package generatedbyassl.as.aes.customera.actions;

import java.io.Serializable;
import generatedbyassl.as.ASSLACTION;

/**
 * Generated by ASSL Framework
 * 
 * This is the Java class generated for 'SimulateUnsatisfiedBandwidth' (specified as ACTION ASSL tier).
 */
public class SIMULATEUNSATISFIEDBANDWIDTH
	extends ASSLACTION
	implements  Serializable
{

	/**
	 * Generated by ASSL Framework
	 * 
	 * This is a reference to the unique instance of 'SIMULATEUNSATISFIEDBANDWIDTH' class.
	 */
	static private SIMULATEUNSATISFIEDBANDWIDTH oInstance = null;
	/**
	 * Generated by ASSL Framework
	 * 
	 * Needed by the class because it implements the Serializable interface.
	 */
	static final long serialVersionUID = 0001L;

	/**
	 * Generated by ASSL Framework
	 * 
	 * Because this is a singleton class its constructor is private.
	 */
	private  SIMULATEUNSATISFIEDBANDWIDTH (  )
	{
	}

	/**
	 * Generated by ASSL Framework
	 * 
	 * This method returns the unique instance of 'SIMULATEUNSATISFIEDBANDWIDTH' class.
	 */
	static public SIMULATEUNSATISFIEDBANDWIDTH getInstance (  )
	{
		if ( null == oInstance ) 
		{
			oInstance = new SIMULATEUNSATISFIEDBANDWIDTH();
		}
		return oInstance;
	}

	/**
	 * Generated by ASSL Framework
	 * 
	 * Provides conditions to be fulfilled before processing the action.
	 */
	public boolean GUARDS (  )
	{
		boolean bResult = true;
		bResult =  generatedbyassl.as.aes.customera.aeself_management.self_healing.INUNSATISFIEDBANDWIDTHSIMULATION.getInstance().isFluentInitiated()  &&  generatedbyassl.as.aes.customera.metrics.BANDWIDTHA.getInstance().isValid()  ;
		return bResult;
	}

	/**
	 * Generated by ASSL Framework
	 * 
	 * Embeds statements to be performed by the action if the GURADS conditions are fulfilled.
	 */
	public void DOES (  )
	{
		super.DOES();
		//generatedbyassl.as.aes.customera.metrics.BANDWIDTHA.getInstance().VALUE = 10 ;
	}

	/**
	 * Generated by ASSL Framework
	 * 
	 * Triggers events in case the action is not successfully performed.
	 */
	public void ONERR_TRIGGERS (  )
	{
		generatedbyassl.as.aes.customera.events.CUSTOMERAINUNSATISFIEDBANDWIDTH.getInstance().triggerEvent();
	}

}